# Example: Auto-generate commits for Pull Requests
# This workflow runs on PR events and creates/updates commits with AI-generated messages

name: 'PR Auto Commits'

on:
  pull_request:
    types: [opened, synchronize]
  workflow_dispatch:

jobs:
  auto-commit:
    name: Generate Commits for PR
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    permissions:
      contents: write
      pull-requests: write
      
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0

      - name: Check for uncommitted changes
        id: check-changes
        run: |
          if git diff --quiet && git diff --cached --quiet; then
            echo "has-changes=false" >> $GITHUB_OUTPUT
          else
            echo "has-changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Generate commit with Claude (Anthropic)
        if: steps.check-changes.outputs.has-changes == 'true'
        uses: hongkongkiwi/rustycommit@main
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RCO_API_KEY: ${{ secrets.RCO_API_KEY }}
          RCO_AI_PROVIDER: 'anthropic'
          RCO_MODEL: 'claude-3-5-haiku-20241022'
          RCO_COMMIT_TYPE: 'conventional'
          RCO_EMOJI: 'true'
          context: 'PR update for ${{ github.event.pull_request.title }}'
          confirm: 'true'
          push: 'true'

      - name: Comment on PR
        if: steps.check-changes.outputs.has-changes == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸ¤– **Rusty Commit** has generated an AI-powered commit message for the latest changes!'
            })