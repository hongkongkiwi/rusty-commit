name: OpenGrep Security Scan

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'  # Run security scan before releases
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  security-events: write  # Required for uploading SARIF results
  actions: read

jobs:
  opengrep:
    name: OpenGrep Security Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run OpenGrep
        uses: opengrep/semgrep-action@v1
        with:
          # Scan for security issues, secrets, and code quality
          config: >-
            p/security-audit
            p/secrets
            p/rust
            p/dockerfile
            p/yaml
            p/github-actions
          # Generate SARIF report for GitHub Security tab
          generateSarif: "1"
        env:
          # Optional: Connect to Semgrep Cloud for enhanced rules and reporting
          # SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
          GITHUB_TOKEN: ${{ github.token }}

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3.27.4
        with:
          sarif_file: semgrep.sarif
        if: always()

      - name: Comment on PR with findings
        uses: actions/github-script@v7.0.1
        if: github.event_name == 'pull_request' && failure()
        with:
          script: |
            const fs = require('fs');

            // Check if SARIF file exists and has findings
            if (fs.existsSync('semgrep.sarif')) {
              const sarif = JSON.parse(fs.readFileSync('semgrep.sarif', 'utf8'));
              const results = sarif.runs?.[0]?.results || [];

              if (results.length > 0) {
                const comment = `## üîç OpenGrep Security Scan Results

Found ${results.length} potential security issue(s) in this PR.

Please review the **Security** tab in this repository for detailed findings, or check the workflow logs.

**Common issues to look for:**
- Hardcoded secrets or credentials
- SQL injection vulnerabilities
- Cross-site scripting (XSS) risks
- Insecure cryptographic practices
- Unsafe deserialization

üí° **Tip**: You can run OpenGrep locally with:
\`\`\`bash
# Install opengrep
pip install opengrep

# Scan your code
opengrep --config=p/security-audit --config=p/secrets --config=p/rust .
\`\`\`
                `;

                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              }
            }

