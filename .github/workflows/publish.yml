name: Publish to crates.io

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-*'

env:
  CARGO_TERM_COLOR: always

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Check version consistency
        run: |
          # Extract version from Cargo.toml
          CARGO_VERSION=$(grep "^version" Cargo.toml | head -1 | cut -d'"' -f2)
          # Extract version from git tag
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          
          echo "Cargo.toml version: $CARGO_VERSION"
          echo "Git tag version: $TAG_VERSION"
          
          # Compare versions (handle pre-release tags)
          if [[ ! "$TAG_VERSION" =~ ^"$CARGO_VERSION" ]]; then
            echo "Error: Version mismatch!"
            echo "Cargo.toml has version $CARGO_VERSION but tag is v$TAG_VERSION"
            exit 1
          fi
      
      - name: Run tests
        run: cargo test --all-features
      
      - name: Check documentation
        run: cargo doc --no-deps --all-features
      
      - name: Verify package
        run: cargo package --allow-dirty

  publish:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: validate
    environment: crates-io
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Publish to crates.io
        run: |
          cargo publish --token ${{ secrets.CRATES_IO_API_TOKEN }}
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_API_TOKEN }}

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: publish
    permissions:
      contents: write
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Extract version
        id: extract_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Generate changelog
        id: changelog
        run: |
          # Get the latest two tags
          CURRENT_TAG=${GITHUB_REF#refs/tags/}
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 $CURRENT_TAG^ 2>/dev/null || echo "")
          
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "Generating changelog from $PREVIOUS_TAG to $CURRENT_TAG"
            CHANGELOG=$(git log --pretty=format:"- %s" $PREVIOUS_TAG..$CURRENT_TAG)
          else
            echo "First release - showing all commits"
            CHANGELOG=$(git log --pretty=format:"- %s")
          fi
          
          # Save changelog to file for the release body
          cat > release_notes.md << EOF
          ## What's Changed
          
          $CHANGELOG
          
          ## Installation
          
          ### Via Cargo
          \`\`\`bash
          cargo install rusty-commit
          \`\`\`
          
          ### Via Homebrew (coming soon)
          \`\`\`bash
          brew install rusty-commit
          \`\`\`
          
          ### Download Binary
          Download the appropriate binary for your platform from the assets below.
          
          ## Full Changelog
          https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...$CURRENT_TAG
          EOF
          
          echo "changelog_file=release_notes.md" >> $GITHUB_OUTPUT
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.extract_version.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(github.ref, '-') }}

  build-release-binaries:
    name: Build Release Binaries
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: rco
            asset_name: rco-linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: rco
            asset_name: rco-linux-arm64
            use_cross: true
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: rco
            asset_name: rco-macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: rco
            asset_name: rco-macos-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: rco.exe
            asset_name: rco-windows-amd64.exe

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Install cross-compilation tools
        if: matrix.use_cross == true
        run: |
          cargo install cross --git https://github.com/cross-rs/cross
      
      - name: Build release binary
        run: |
          if [ "${{ matrix.use_cross }}" == "true" ]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi
        shell: bash
      
      - name: Prepare binary
        run: |
          cd target/${{ matrix.target }}/release
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            7z a -tzip ${{ matrix.asset_name }}.zip ${{ matrix.artifact_name }}
          else
            tar czf ${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}
          fi
        shell: bash
      
      - name: Upload Release Asset (tar.gz)
        if: matrix.os != 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: target/${{ matrix.target }}/release/${{ matrix.asset_name }}.tar.gz
          asset_name: ${{ matrix.asset_name }}.tar.gz
          asset_content_type: application/gzip
      
      - name: Upload Release Asset (zip)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: target/${{ matrix.target }}/release/${{ matrix.asset_name }}.zip
          asset_name: ${{ matrix.asset_name }}.zip
          asset_content_type: application/zip

  publish-homebrew:
    name: Update Homebrew Formula
    runs-on: ubuntu-latest
    needs: [publish, build-release-binaries]
    if: "!contains(github.ref, '-')"  # Only for stable releases
    steps:
      - name: Trigger Homebrew formula update
        run: |
          echo "Homebrew formula update would be triggered here"
          echo "This would typically:"
          echo "1. Calculate SHA256 of the release artifacts"
          echo "2. Update the formula in a homebrew tap repository"
          echo "3. Submit a PR to homebrew-core (if applicable)"