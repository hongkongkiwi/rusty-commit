name: Publish to crates.io

on:
  release:
    types: [published]

permissions:
  contents: write  # Required for uploading release assets

env:
  CARGO_TERM_COLOR: always

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@nightly

      - name: Check version consistency
        run: |
          # Extract version from Cargo.toml
          CARGO_VERSION=$(grep "^version" Cargo.toml | head -1 | cut -d'"' -f2)
          # Extract version from release tag
          TAG_VERSION=${{ github.event.release.tag_name }}
          TAG_VERSION=${TAG_VERSION#v}  # Remove 'v' prefix if present

          echo "Cargo.toml version: $CARGO_VERSION"
          echo "Release tag version: $TAG_VERSION"

          # Compare versions (handle pre-release tags)
          if [[ ! "$TAG_VERSION" =~ ^"$CARGO_VERSION" ]]; then
            echo "Error: Version mismatch!"
            echo "Cargo.toml has version $CARGO_VERSION but release tag is $TAG_VERSION"
            exit 1
          fi

      - name: Run tests
        run: cargo test --all-features

      - name: Check documentation
        run: cargo doc --no-deps --all-features

      - name: Verify package
        run: cargo package --allow-dirty

  publish:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: validate
    environment: crates-io
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@nightly

      - name: Publish to crates.io
        run: |
          cargo publish --token ${{ secrets.CRATES_IO_API_TOKEN }}
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_API_TOKEN }}

  build-release-binaries:
    name: Build Release Binaries
    needs: publish
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: rco
            asset_name: rco-linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: rco
            asset_name: rco-linux-arm64
            use_cross: true
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: rco
            asset_name: rco-macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: rco
            asset_name: rco-macos-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: rco.exe
            asset_name: rco-windows-amd64.exe

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@nightly
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: matrix.use_cross == true
        run: |
          cargo install cross --git https://github.com/cross-rs/cross

      - name: Build release binary
        run: |
          if [ "${{ matrix.use_cross }}" == "true" ]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi
        shell: bash

      - name: Prepare binary
        run: |
          cd target/${{ matrix.target }}/release
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            7z a -tzip ${{ matrix.asset_name }}.zip ${{ matrix.artifact_name }}
          else
            tar czf ${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}
          fi
        shell: bash

      - name: Upload Release Asset (tar.gz)
        if: matrix.os != 'windows-latest'
        uses: softprops/action-gh-release@v2
        with:
          files: target/${{ matrix.target }}/release/${{ matrix.asset_name }}.tar.gz

      - name: Upload Release Asset (zip)
        if: matrix.os == 'windows-latest'
        uses: softprops/action-gh-release@v2
        with:
          files: target/${{ matrix.target }}/release/${{ matrix.asset_name }}.zip

  publish-homebrew:
    name: Update Homebrew Formula
    runs-on: ubuntu-latest
    needs: [publish, build-release-binaries]
    if: ${{ !github.event.release.prerelease }}  # Only for stable releases
    steps:
      - name: Trigger Homebrew formula update
        run: |
          echo "Homebrew formula update would be triggered here"
          echo "This would typically:"
          echo "1. Calculate SHA256 of the release artifacts"
          echo "2. Update the formula in a homebrew tap repository"
          echo "3. Submit a PR to homebrew-core (if applicable)"

  trigger-packaging:
    name: Trigger OS Package Creation
    runs-on: ubuntu-latest
    needs: publish
    if: ${{ !github.event.release.prerelease }}
    steps:
      - name: Trigger package workflow
        run: |
          echo "Package creation workflow (package-release.yml) runs automatically"
          echo "It's triggered by the same 'release published' event"
          echo "Packages being created:"
          echo "- Debian/Ubuntu (.deb) for amd64, arm64, armhf"
          echo "- RPM (.rpm) for x86_64, aarch64"
          echo "- Alpine (.apk) for x86_64"
          echo "- Snap (.snap) universal package"
          echo "- Tarball (.tar.gz) with install script"
          echo "- Windows ZIP with installer"
