name: Prepare Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.1)'
        required: true
        type: string
      release_type:
        description: 'Release type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
          - custom

jobs:
  prepare-release:
    name: Prepare Release PR
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Configure git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Determine version
        id: version
        run: |
          if [ "${{ inputs.release_type }}" == "custom" ]; then
            NEW_VERSION="${{ inputs.version }}"
          else
            # Get current version from Cargo.toml
            CURRENT_VERSION=$(grep "^version" Cargo.toml | head -1 | cut -d'"' -f2)

            # Parse version components
            IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
            MAJOR="${VERSION_PARTS[0]}"
            MINOR="${VERSION_PARTS[1]}"
            PATCH="${VERSION_PARTS[2]}"

            # Increment based on release type
            case "${{ inputs.release_type }}" in
              major)
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                ;;
              minor)
                MINOR=$((MINOR + 1))
                PATCH=0
                ;;
              patch)
                PATCH=$((PATCH + 1))
                ;;
            esac

            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          fi

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version will be: $NEW_VERSION"

      - name: Update Cargo.toml version
        run: |
          sed -i "s/^version = \".*\"/version = \"${{ steps.version.outputs.new_version }}\"/" Cargo.toml

      - name: Update Cargo.lock
        run: cargo update --workspace

      - name: Run tests
        run: cargo test --all-features

      - name: Generate changelog entry
        id: changelog
        run: |
          VERSION="${{ steps.version.outputs.new_version }}"
          DATE=$(date +%Y-%m-%d)

          # Create changelog entry
          cat > CHANGELOG_ENTRY.md << EOF
          ## [$VERSION] - $DATE

          ### Added
          - New features go here

          ### Changed
          - Changes to existing functionality go here

          ### Fixed
          - Bug fixes go here

          ### Security
          - Security fixes go here

          EOF

          # If CHANGELOG.md exists, prepend the new entry
          if [ -f CHANGELOG.md ]; then
            # Insert after the header
            sed -i "/^# Changelog/a\\
          \\
          $(cat CHANGELOG_ENTRY.md | sed 's/$/\\n/' | tr '\n' ' ')" CHANGELOG.md
          else
            # Create new CHANGELOG.md
            cat > CHANGELOG.md << EOF
          # Changelog

          All notable changes to this project will be documented in this file.

          The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
          and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

          $(cat CHANGELOG_ENTRY.md)
          EOF
          fi

      - name: Create release branch
        run: |
          BRANCH_NAME="release/v${{ steps.version.outputs.new_version }}"
          git checkout -b $BRANCH_NAME
          git add Cargo.toml Cargo.lock CHANGELOG.md
          git commit -m "chore: prepare release v${{ steps.version.outputs.new_version }}"
          git push origin $BRANCH_NAME

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: release/v${{ steps.version.outputs.new_version }}
          title: "Release v${{ steps.version.outputs.new_version }}"
          body: |
            ## Release v${{ steps.version.outputs.new_version }}

            This PR prepares the release for version v${{ steps.version.outputs.new_version }}.

            ### Checklist
            - [ ] Version bumped in Cargo.toml
            - [ ] Cargo.lock updated
            - [ ] Tests passing
            - [ ] CHANGELOG.md updated with release notes
            - [ ] Documentation updated (if needed)

            ### Release Process
            1. Review and update the CHANGELOG.md with actual changes
            2. Merge this PR
            3. Create and push a tag: `git tag v${{ steps.version.outputs.new_version }} && git push origin v${{ steps.version.outputs.new_version }}`
            4. The release workflow will automatically:
               - Publish to crates.io
               - Create GitHub release with binaries
               - Update Homebrew formula (if applicable)

            ### Type of Change
            Release type: **${{ inputs.release_type }}**
          labels: |
            release
            automated
